@using Microsoft.EntityFrameworkCore
@using Oracle.Data
@using Oracle.Data.Models
@using Oracle.Logic.Services
@using Oracle.App.Components.Shared.Editors

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @((ActivityTypeId == 0) ? "Add new activity type" : "Edit activity type")
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="row">
	        <div class="col-md-4">
		        <h6>Details</h6>
		        <MudTextField Variant="Variant.Outlined" Label="Name" @bind-Value="ActivityTypeName"/>
		        <MudCheckBox Label="Can contribute to a project?" @bind-Value="ActivityContributesToProject"/>
		        <MudSelect T="int" Disabled="@(!ActivityContributesToProject)" Label="Project Contribution Type" Variant="Variant.Outlined" @bind-Value="SelectedProjectContributionType">
			        @foreach (var projectContributionType in ProjectContributionTypes)
			        {
				        <MudSelectItem Value="@projectContributionType.Id">@projectContributionType.Name</MudSelectItem>
			        }
		        </MudSelect>
		        <MudNumericField Variant="Variant.Outlined" Disabled="@(!ActivityContributesToProject)" Label="Contribution per day" @bind-Value="ActivityContributionPerDay"/>
	        </div>
	        <div class="col-md-8">
                
		        <h6>Description</h6>
		        <OracleRichTextEditor @bind-Value="ActivityTypeDescription"/>

	        </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="ProcessingNewActivityType" OnClick="Cancel">Cancel</MudButton>
        <MudButton Disabled="ProcessingNewActivityType" Color="Color.Primary" OnClick="Submit">@(ActivityTypeId == 0 ? "Add Activity Type" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] protected IDialogService DialogService { get; set; } = null!;
    [Inject] private OracleDbContext Db { get; set; } = null!;

    [Parameter] public int ActivityTypeId { get; set; }

    
    private bool ProcessingNewActivityType { get; set; } = false;

    private string ActivityTypeName { get; set; } = string.Empty;
    private string ActivityTypeDescription { get; set; } = string.Empty;
    private bool ActivityContributesToProject { get; set; } = false;
    private int SelectedProjectContributionType { get; set; } = 0;
    private int ActivityContributionPerDay { get; set; } = 0;

    private List<ProjectContributionType> ProjectContributionTypes { get; set; } = new List<ProjectContributionType>();

    protected override async Task OnInitializedAsync()
    {
	    MudDialog.Options.FullWidth = true;
        MudDialog.Options.MaxWidth = MaxWidth.Large;

        MudDialog.SetOptions(MudDialog.Options);

        await Refresh();
    }

    private async Task Refresh()
    {
        ProjectContributionTypes = await Db.ProjectContributionTypes.ToListAsync();

        if (ActivityTypeId != 0)
        {
            var activityType = await Db.ActivityTypes.Where(x => x.Id == ActivityTypeId)
	            .Include(x => x.ProjectContributionType)
	            .FirstOrDefaultAsync();
            if (activityType != null)
            {
                ActivityTypeName = activityType.Name;
                ActivityTypeDescription = activityType.Description;
                SelectedProjectContributionType = activityType.ProjectContributionTypeId ?? 0;
                ActivityContributesToProject = activityType.ProjectContributionTypeId != null;
                ActivityContributionPerDay = activityType.ProjectContributionAmount;
            }
        }
    }

    private async Task Submit()
    {
        ProcessingNewActivityType = true;

        if (ActivityTypeId == 0)
        {
            // Add new activity type
            var activityType = new ActivityType
			{
				Name = ActivityTypeName,
				Description = ActivityTypeDescription,
				ProjectContributionTypeId = SelectedProjectContributionType == 0 ? null : SelectedProjectContributionType,
				ProjectContributionAmount = ActivityContributionPerDay
			};

            Db.ActivityTypes.Add(activityType);
            await Db.SaveChangesAsync();
            
            MudDialog.Close(DialogResult.Ok("Activity Type Added"));
            
        }
        else
        {
	        var activityType = await Db.ActivityTypes.Where(x => x.Id == ActivityTypeId)
		        .Include(x => x.ProjectContributionType)
		        .FirstOrDefaultAsync();
	        if (activityType != null)
	        {
                activityType.Name = ActivityTypeName;
                activityType.Description = ActivityTypeDescription;
                activityType.ProjectContributionTypeId = SelectedProjectContributionType == 0 ? null : SelectedProjectContributionType;
                activityType.ProjectContributionAmount = ActivityContributionPerDay;

                await Db.SaveChangesAsync();
		        MudDialog.Close(DialogResult.Ok("Activity Type Updated"));
	        }
	        else
	        {
		        MudDialog.Cancel();
	        }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
