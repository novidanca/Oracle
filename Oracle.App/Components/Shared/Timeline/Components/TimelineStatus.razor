@using System.Security.Cryptography
@using System.Text
@using Oracle.Logic.Services.TimelineService

@if (Status != null)
{
	<div class="timeline-nonBlocking-Status" style="width: @(SpanWidth)px; margin-right: @(Margin)px; background: @GetHexColorFromDescription(Status.Description)"
	     title="@($"{Status.Description}-{Day}")">
	</div>
}
else
{
	<div style="width: @(DayWidthPixels + MarginPixels)px;">

	</div>
}


@code {
	[Parameter][EditorRequired] public int DayWidthPixels { get; set; }
	[Parameter][EditorRequired] public int MarginPixels { get; set; }
	[Parameter][EditorRequired] public int Day { get; set; }
	[Parameter] public StatusVm? Status { get; set; }
	[Parameter] public EventCallback<string> OnStatusItemClicked { get; set; }

	private int SpanWidth
	{
		get
		{
			if (Status is { EndDate: not null } && Status.EndDate == Day)
			{
				return DayWidthPixels;
			}
			return DayWidthPixels + MarginPixels;
		}
	}

	private int Margin
	{
		get
		{
			if (Status is { EndDate: not null } && Status.EndDate == Day)
			{
				return MarginPixels;
			}
			return 0;
		}
	}

	public static string GetHexColorFromDescription(string description)
	{
		// Step 1: Hash the string
		int hash = GetStableHash(description);
        
		// Step 2: Convert hash to a hex color
		string hexColor = HashToColor(hash);
        
		return hexColor;
	}
    
	private static int GetStableHash(string input)
	{
		// Use a hash function to generate a stable integer hash from the string
		using (MD5 md5 = MD5.Create())
		{
			byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(input));
			int hash = BitConverter.ToInt32(hashBytes, 0);
			return hash;
		}
	}
    
	private static string HashToColor(int hash)
	{
		// Ensure the hash is positive
		hash = Math.Abs(hash);
        
		// Generate RGB values from the hash
		int r = (hash & 0xFF0000) >> 16;
		int g = (hash & 0x00FF00) >> 8;
		int b = hash & 0x0000FF;
        
		// Convert RGB to hex
		return $"#{r:X2}{g:X2}{b:X2}";
	}
}
