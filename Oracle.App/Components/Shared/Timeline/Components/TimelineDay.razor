@using System.Diagnostics
@using Oracle.App.Components.Shared.Timeline.Models
@using Oracle.Logic.Services.TimelineService
@using Oracle.App.Components.Shared.Timeline.Components

@*Single Day*@
@if (Duration == 1)
{
	<OracleTooltip>
		<ChildContent>
			<div class="timeline-Span dropdown-center timeline-Item @CssClass @(IsComplete ? "" : "incomplete")"
			     style="width: @StyleSpec.GetTimelineDayPixelWidth()px; margin-right: @(StyleSpec.MarginPixels)px;
			            height: @(StyleSpec.DayHeightPixels)px;">
				<button class="d-flex align-center justify-center"
				        type="button"
				        data-bs-toggle="dropdown"
				        aria-expanded="false"
				        style="width: 100%; height: 100%;">
					<div class="timeline-Span-Background ms-2">
						<MudIcon Icon="@Icon"></MudIcon>
					</div>

					@*Blocking Status Exist*@
					@if (GetBlockingConditions(StartDay).Any())
					{
						<div class="timeline-Span-Foreground">
							<div>
								<MudIcon Icon="@Icons.Material.Filled.Texture" Size="Size.Large"></MudIcon>
							</div>
						</div>
					}
				</button>
				<TimelineDayMenu DayType="@DayType"
				                 Day="@StartDay"
				                 Text="@Text" 
				                 HasConditions="@(GetBlockingConditions(StartDay).Any())" 
				                 Conditions="@(GetConditionDescriptions(StartDay))"
				                 OnMenuItemClicked="@((string command) => OnMenuItemClicked.InvokeAsync(command))"/>
			</div>
		</ChildContent>
		<TooltipContent>
			<div class="d-flex flex-column ma-1">
				<div>Day @(StartDay)</div>

				@if (DayType != TimelineEntityTypes.None)
				{
					<div class="mt-2">@Text</div>
				}

				@if (GetBlockingConditions(StartDay).Any())
				{
					<hr/>
					<div>
						@GetConditionDescriptions(StartDay)
					</div>
				}
			</div>
		</TooltipContent>

	</OracleTooltip>
	
}
@*Multi-Day*@
else
{
	<div class="timeline-Span timeline-Item @CssClass @(IsComplete ? "" : "incomplete")"
		 style="width: @StyleSpec.GetTimelineDayPixelWidth(Duration)px; margin-right: @(StyleSpec.MarginPixels)px; height: @(StyleSpec.DayHeightPixels)px;">
		@*Background*@
		<div class="timeline-Span-Background ms-2">
			@Text
		</div>
		@*Foreground *@
		<div class="timeline-Span-Foreground" style="width: @StyleSpec.GetSpanInnerPixelWidth(Duration)px; height: @(StyleSpec.InnerSpanHeightPixels)px;">
			@for (var i = 0; i < Duration; i++)
			{
				var day = i;

				var dayConditions = GetBlockingConditions(StartDay + day);
				var conditionDescriptions = GetConditionDescriptions(StartDay + day);

				// Inner span width. Smaller for first and last items
				var width = day == 0 || day == Duration - 1 ? StyleSpec.InnerSpanEndWidthPixels : StyleSpec.DayWidthPixels;
				var marginLeft = day == 0 ? StyleSpec.MarginPixels : 0;
				var marginRight = day == Duration - 1 ? 0 : StyleSpec.MarginPixels;
				var height = StyleSpec.InnerSpanHeightPixels;
				
				<MudTooltip Placement="Placement.Top">
					<ChildContent>
						<div class="timeline-Item dropdown-center" style="width: @(width)px; height: @(height)px; margin-left: @(marginLeft)px; margin-right: @(marginRight)px;">
							<button type="button"
							        data-bs-toggle="dropdown"
							        aria-expanded="false"
							        style="width: 100%; height: 100%;">
								@if (dayConditions.Any())
								{
									<div class="timeline-Span-Foreground">
										<div>
											<MudIcon Icon="@Icons.Material.Filled.Texture" Size="Size.Large"></MudIcon>
										</div>
									</div>
								}
							</button>
							
							<TimelineDayMenu DayType="@DayType"
											 Day="@(StartDay + day)"
							                 Text="@Text" 
							                 HasConditions="@(dayConditions.Any())" 
							                 Conditions="@conditionDescriptions"
							                 OnMenuItemClicked="@((string command) => OnMenuItemClicked.InvokeAsync(command))"/>

						</div>
					</ChildContent>
					<TooltipContent>
						<div class="d-flex flex-column ma-1">
							<div>Day @(StartDay + day)</div>

							@if (DayType != TimelineEntityTypes.None)
							{
								<div class="mt-2">@Text</div>
							}

							@if (dayConditions.Any())
							{
								<hr/>
								<div>
									@conditionDescriptions
								</div>
							}
						</div>
					</TooltipContent>
				</MudTooltip>
			}
			@*Menus*@

		</div>
	</div>
}



@code
{
	[Parameter] public int Duration { get; set; } = 1;
	[Parameter] public TimelineDayStyleSpec StyleSpec { get; set; } = new();
	[Parameter] public List<ConditionVm> Conditions { get; set; } = [];
	[Parameter] public TimelineEntityTypes DayType { get; set; } = TimelineEntityTypes.None;
	[Parameter] public EventCallback<string> OnMenuItemClicked { get; set; }
	[Parameter] public bool IsComplete { get; set; } = true;
	[Parameter] public string? Text { get; set; }
	[Parameter] public int StartDay { get; set; }

	private static int BorderPixels => 2;
	
	private List<ConditionVm> GetBlockingConditions(int day)
	{
		return Conditions.Where(x => x.StartDate <= day && (x.EndDate == null || x.EndDate >= day)).ToList();
	}

	private string GetConditionDescriptions(int day)
	{
		var statuses = GetBlockingConditions(day);
		if (statuses.Any())
		{
			return string.Join(", ", statuses.Select(x => x.Description));
		}

		return "";
	}
	
    private string CssClass => DayType switch
    {
	    TimelineEntityTypes.Adventure => "timeline-Adventure",
	    TimelineEntityTypes.Activity => "timeline-Activity",
	    TimelineEntityTypes.BlockingStatus => "timeline-Status",
	    _ => "timeline-Nothing"
    };

    private string Icon => DayType switch
    {
	    TimelineEntityTypes.Adventure => "fa-regular fa-sword",
	    TimelineEntityTypes.Activity => "fa-regular fa-screwdriver-wrench",
	    _ => ""
    };

}