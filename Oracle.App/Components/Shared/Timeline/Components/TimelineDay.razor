@using Oracle.Logic.Services.TimelineService

@*Single Day*@
@if (Duration == 1)
{
	<div class="timeline-Span dropdown-center timeline-Item @CssClass @(IsComplete ? "" : "incomplete")"
		 style="width: @GetTimelineDayPixelWidth(DayWidthPixels, Duration, MarginPixels)px; margin-right: @(MarginPixels)px;
	        height: @(DayHeightPixels)px;">
		<button class="d-flex align-center"
				type="button"
				data-bs-toggle="dropdown"
				aria-expanded="false"
				style="width: 100%; height: 100%;">
			<div class="timeline-Span-Background ms-2">
				@Text
			</div>
			
			@*Blocking Status Exist*@
			@if (GetBlockingStatuses(StartDay).Any())
			{
				<div class="timeline-Span-Foreground">
					<div class="timeline-Item timeline-Status"
						 style="width: @(InnerSpanWidth())px; height: @(InnerSpanHeight())px; margin-top: @(InnerSpanYMargin())px; margin-bottom: @(InnerSpanYMargin())px; margin-left: @(InnerSpanXMargin())px; margin-right: @(InnerSpanXMargin())px;">
					</div>
				</div>
			}
		</button>
		<ul class="dropdown-menu">
			@if (DayType == TimelineEntityTypes.None)
			{
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addActivity"))">Add Activity</div></li>
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addAdventure"))">Add Adventure</div></li>
			}
			@if (DayType == TimelineEntityTypes.Activity)
			{
				<li><h6 class="dropdown-header">Downtime Activity: @Text</h6></li>
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("editActivity"))">Edit</div></li>
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("deleteActivity"))">Delete</div></li>
			}
			@if (DayType == TimelineEntityTypes.Adventure)
			{
				<li><h6 class="dropdown-header">Adventure: @Text</h6></li>
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("viewAdventure"))">View</div></li>
			}
			@if (GetBlockingStatuses(StartDay).Any())
			{
				<li><hr class="dropdown-divider" /></li>
				<li><h6 class="dropdown-header">Statuses: @GetBlockingStatusesDescription(StartDay)</h6></li>
				<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("manageStatuses"))">Manage Statuses</div></li>
			}
			<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addStatus"))">Add Status</div></li>
		</ul>
	</div>
}
@*Multi-Day*@
else
{
	<div class="timeline-Span timeline-Item @CssClass @(IsComplete ? "" : "incomplete")"
	     style="width: @GetTimelineDayPixelWidth(DayWidthPixels, Duration, MarginPixels)px; margin-right: @(MarginPixels)px; height: @(DayHeightPixels)px;">
		@*Background*@
		<div class="timeline-Span-Background ms-2">
			@Text
		</div>
		@*Foreground *@
		<div class="timeline-Span-Foreground">
			@for (var i = 0; i < Duration; i++)
			{
				var dayStatuses = GetBlockingStatuses(StartDay + i);
				var statusDescription = GetBlockingStatusesDescription(StartDay + i);
				double marginRight = 0;
				if (i != Duration)
				{
					marginRight = InnerSpanXMargin() + MarginPixels + BorderSize;
				}

				<div class="timeline-Item dropdown-center @(dayStatuses.Any() ? "timeline-Status" : "")"
				     style="width: @(InnerSpanWidth())px; height: @(InnerSpanHeight())px; margin-top: @(InnerSpanYMargin())px; margin-bottom: @(InnerSpanYMargin())px; margin-left: @(InnerSpanXMargin())px; margin-right: @(marginRight)px;">
					<button type="button"
					        data-bs-toggle="dropdown"
					        aria-expanded="false"
					        style="width: 100%; height: 100%;"></button>
					
					<ul class="dropdown-menu">
						@if (DayType == TimelineEntityTypes.None)
						{
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addActivity"))">Add Activity</div></li>
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addAdventure"))">Add Adventure</div></li>
						}
						@if (DayType == TimelineEntityTypes.Activity)
						{
							<li><h6 class="dropdown-header">Downtime Activity: @Text</h6></li>
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("editActivity"))">Edit</div></li>
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("deleteActivity"))">Delete</div></li>
						}
						@if (DayType == TimelineEntityTypes.Adventure)
						{
							<li><h6 class="dropdown-header">Adventure: @Text</h6></li>
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("viewAdventure"))">View</div></li>
						}
						@if (dayStatuses.Any())
						{
							<li><hr class="dropdown-divider"/></li>
							<li><h6 class="dropdown-header">Statuses: @statusDescription</h6></li>
							<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("manageStatuses"))">Manage Statuses</div></li>
						}
						
						<li><div class="dropdown-item" @onclick="@(() => OnMenuItemClicked.InvokeAsync("addStatus"))">Add Status</div></li>
					</ul>
				</div>
			}
		</div>
	</div>
}



@code
{
	[Parameter] public int Duration { get; set; } = 1;
	[Parameter] public int DayWidthPixels { get; set; }
	[Parameter] public int DayHeightPixels { get; set; }
	[Parameter] public int MarginPixels { get; set; }
	[Parameter] public List<StatusVm> BlockingStatuses { get; set; } = [];
	[Parameter] public TimelineEntityTypes DayType { get; set; } = TimelineEntityTypes.None;
	[Parameter] public EventCallback<string> OnMenuItemClicked { get; set; }
	[Parameter] public bool IsComplete { get; set; } = true;
	[Parameter] public string? Text { get; set; }
	[Parameter] public int StartDay { get; set; }

	private static double InnerSpanMargin => 0.125;
	private static double InnerSpanSize => 0.75;
	private static double BorderSize => 2;
	
	private double InnerSpanWidth()
	{
		return DayWidthPixels * InnerSpanSize;
	}

	private double InnerSpanHeight()
	{
		return DayHeightPixels * InnerSpanSize;
	}

	private double InnerSpanYMargin()
	{
		return (DayHeightPixels * InnerSpanMargin)-(BorderSize/2);
	}

	private double InnerSpanXMargin()
	{
		return (DayWidthPixels * InnerSpanMargin) - (BorderSize / 2);
	}

	private List<StatusVm> GetBlockingStatuses(int day)
	{
		return BlockingStatuses.Where(x => x.StartDate <= day && (x.EndDate == null || x.EndDate >= day)).ToList();
	}

	private string GetBlockingStatusesDescription(int day)
	{
		var statuses = GetBlockingStatuses(day);
		if (statuses.Any())
		{
			return string.Join(", ", statuses.Select(x => x.Description));
		}

		return "";
	}
	
    private string CssClass => DayType switch
    {
	    TimelineEntityTypes.Adventure => "timeline-Adventure",
	    TimelineEntityTypes.Activity => "timeline-Activity",
	    TimelineEntityTypes.BlockingStatus => "timeline-Status",
	    _ => "timeline-Nothing"
    };

    private static int GetTimelineDayPixelWidth(int timelineDayPixels, int numDays, int timelineDayMarginPixels)
    {
	    var numMarginPixels = numDays <= 1 ? 0 : timelineDayMarginPixels * (numDays - 1);
	    var numPixels = timelineDayPixels * numDays;
	    numPixels += numMarginPixels;
	    return numPixels;
    }
}