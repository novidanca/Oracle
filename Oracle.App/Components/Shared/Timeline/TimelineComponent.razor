@using Oracle.Logic.Services.TimelineService
@using Oracle.App.Components.Shared.Timeline.Components


@elapsedMs

<table>
	<thead>
		<tr>
			<th class="me-5">Characters</th>
			<th class="timeline-Container" style="position: relative;">
				@foreach (var day in Enumerable.Range(StartDay, EndDay + 1 - StartDay))
				{
					<div class="timeline-Item timeline-Date pa-2" style="width: @StyleSpec.GetTimelineDayPixelWidth()px; margin-right: @(StyleSpec.MarginPixels)px;">
						@day
					</div>
				}
			</th>
		</tr>
	</thead>
	
    <tbody>
        @for (var c = 0; c < Characters.Count; c++)
        {
            var character = Characters[c];
            var topMargin = c > 0 ? "3": "0";

            var characterTimelineVm = CharacterTimelines.First(x => x.CharacterId == character.Id);
            var timeline = characterTimelineVm.Timeline;
            var notes = characterTimelineVm.Notes;
            var conditions = characterTimelineVm.Conditions;

            TimelineDateVm? currentDayItem = null;

            <tr>
				<td class="me-5">@character.Name</td>
				<td class="timeline-Container mt-@topMargin" style="position: relative;">
		            @for (var i = StartDay; i <= EndDay; i++)
		            {
			            // Logic for the first day in the timeline, catches items that started previously but haven't finished yet
			            if (i == StartDay)
			            {
				            var previousDayItem = timeline.FirstOrDefault(x => x.StartDate <= i);
				            if (previousDayItem != null)
				            {
					            currentDayItem = previousDayItem;
					            var endDay = currentDayItem.EndDate ?? EndDay;
					            var duration = GetCountOfIntegers(StartDay, endDay);
					            var i1 = i;

					            var item = currentDayItem;
					            <TimelineDay DayType="@item.Type"
					                         Duration="@duration"
					                         Text="@item.Description"
					                         IsComplete="@item.IsComplete"
					                         StartDay="@i1"
											 StyleSpec="@StyleSpec"
					                         Conditions="@GetOverlappingConditions(conditions, StartDay, endDay)"
					                         OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id, timelineId: item.TimelineId)" />
				            }
				            else
				            {
					            //Empty Cell Menu
					            var i1 = i;
								<TimelineDay StyleSpec="@StyleSpec"
					                         StartDay="@i1"
					                         Conditions="@GetOverlappingConditions(conditions, StartDay, StartDay)"
					                         OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id)" />
				            }
			            }
			            // Logic for each other day in the shown Timeline
			            else
			            {
				            // Get the day item for the current day
				            var dayItem = timeline.FirstOrDefault(x => x.StartDate == i);
				            //Starting a new item
				            if (dayItem != null)
				            {
					            currentDayItem = dayItem;
					            var duration = GetTimelineEventDuration(currentDayItem, EndDay);
					            var i1 = i;
					            var conds = GetOverlappingConditions(conditions, i1, EndDay);

					            var item = currentDayItem;
					            <TimelineDay DayType="@item.Type"
					                         StyleSpec="@StyleSpec"
					                         Text="@item.Description"
					                         IsComplete="@item.IsComplete"
					                         Duration="@duration"
					                         StartDay="@i1"
					                         Conditions="@conds"
					                         OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id, item.TimelineId)" />
				            }
				            // Check if the current day item has ended. If so, render a blank
				            else
				            {
					            if (currentDayItem != null && currentDayItem.EndDate < i)
					            {
						            currentDayItem = null;
					            }

					            if (currentDayItem == null)
					            {
						            //Empty Cell Menu
						            var i1 = i;
									<TimelineDay StyleSpec="@StyleSpec"
						                         StartDay="@i1"
						                         Conditions="@GetOverlappingConditions(conditions, i1, i1)"
						                         OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id)"></TimelineDay>
					            }
				            }
			            }
		            }
	            </td>
            </tr>

			@foreach (var note in notes)
			{
				<tr>
					<td></td>
					<td class="timeline-Container mt-1" style="position: relative;">
						@for (var i = StartDay; i <= EndDay; i++)
						{
							if (note.StartDate <= i && (note.EndDate == null || note.EndDate >= i))
							{
								<TimelineNote Note="@note"
								              DayWidthPixels="@StyleSpec.DayWidthPixels"
											  MarginPixels="@StyleSpec.MarginPixels"
								              Day="@i" />
							}
							else
							{
								<TimelineNote Note="null"
								              DayWidthPixels="@StyleSpec.DayWidthPixels"
								              MarginPixels="@StyleSpec.MarginPixels"
								              Day="@i" />
							}
						}
					</td>
				</tr>
			}
        }
    </tbody>
</table>


















