@page "/timeline"
@using System.Globalization
@using Oracle.Logic.Services.TimelineService
@using Oracle.App.Components.Pages.Timeline.Components
@inherits OracleBasePage

<OracleTitle Title="Timeline" />


<MudPaper Class="pa-5">
	<div class="mb-4">
		<MudSlider T="int" ValueChanged="OnStartDateChanged" Min="0" Max="@MaxEndDay" ValueLabel="true"></MudSlider>
	</div>
	<table>
		<tr>
			<th class="me-5">Characters</th>
			<th class="timeline-Container">
				@foreach (var day in Enumerable.Range(StartDay, EndDay + 1 - StartDay))
				{
					<div class="timeline-Item timeline-Date pa-2" style="width: @GetTimelineDayPixelWidth(TimelineDayWidthPixels, 1, TimelineDayMarginPixels)px; margin-right: @(TimelineDayMarginPixels)px;">
						@day
					</div>
				}
			</th>
		</tr>

		@foreach (var character in Characters)
		{
			var timeline = Timeline.First(x => x.CharacterId == character.Id).Timeline;
			TimelineDateVm? currentDayItem = null;


			<tr>
				<td class="me-5">@character.Name</td>
				<td class="timeline-Container">
					@for (var i = StartDay; i <= EndDay; i++)
					{
						if (i == StartDay)
						{
							var previousDayItem = timeline.FirstOrDefault(x => x.StartDate <= i);

							if (previousDayItem != null)
							{
								currentDayItem = previousDayItem;
								var duration = currentDayItem.EndDate == null
									? GetCountOfIntegers(StartDay, EndDay)
									: GetCountOfIntegers(StartDay, currentDayItem.EndDate.Value);
								var i1 = i;

								var item = currentDayItem;
								<TimelineDay
									DayType="@item.Type"
									Text="@item.Description"
									IsComplete="@item.IsComplete"
									Width="@GetTimelineDayPixelWidth(TimelineDayWidthPixels, duration, TimelineDayMarginPixels)"
									Margin="@TimelineDayMarginPixels"
									OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id, item.TimelineId)"/>
							}
							else
							{
								//Empty Cell Menu
								var i1 = i;
								<TimelineDay
									Width="@GetTimelineDayPixelWidth(TimelineDayWidthPixels, 1, TimelineDayMarginPixels)"
									Margin="@TimelineDayMarginPixels"
									OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id)"/>
							}
						}
						else
						{
							var dayItem = timeline.FirstOrDefault(x => x.StartDate == i);

							//Starting a new item
							if (dayItem != null)
							{
								currentDayItem = dayItem;
								var duration = GetTimelineEventDuration(currentDayItem, EndDay);
								var i1 = i;

								var item = currentDayItem;
								<TimelineDay
									DayType="@item.Type"
									Text="@item.Description"
									IsComplete="@item.IsComplete"
									Width="@GetTimelineDayPixelWidth(TimelineDayWidthPixels, duration, TimelineDayMarginPixels)"
									Margin="@TimelineDayMarginPixels"
									OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id, item.TimelineId)"/>
							}
							// Check if the current thing has ended. If so, render a blank
							else
							{
								if (currentDayItem != null && currentDayItem.EndDate < i)
								{
									currentDayItem = null;
								}

								if (currentDayItem == null)
								{
									//Empty Cell Menu
									var i1 = i;
									<TimelineDay Width="@GetTimelineDayPixelWidth(TimelineDayWidthPixels, 1, TimelineDayMarginPixels)"
									             Margin="@TimelineDayMarginPixels"
									             OnMenuItemClicked="(command) => OnMenuCommandClicked(command, i1, character.Id)"></TimelineDay>
								}
							}
						}
					}
				</td>
			</tr>
		}
	</table>
</MudPaper>



